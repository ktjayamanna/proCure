version: "3.8"

services:
  postgres:
    image: postgres:15
    container_name: procure_postgres
    restart: always
    environment:
      POSTGRES_USER: procure_user
      POSTGRES_PASSWORD: procure_password
      POSTGRES_DB: procure_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - procure_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U procure_user -d procure_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  core_service:
    build:
      context: ../../
      dockerfile: deployment/docker_compose/Dockerfile
    container_name: procure_core_service
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Use the host's environment variables if set, otherwise use defaults
      DATABASE_URL: ${DATABASE_URL:-postgresql://procure_user:procure_password@postgres:5432/procure_db}
      DB_USE_IAM_AUTH: ${DB_USE_IAM_AUTH:-false}
      AWS_DATABASE_URL: ${AWS_DATABASE_URL:-}
      AWS_REGION: ${AWS_REGION:-us-east-2}
      PYTHONPATH: /app
      # Pass through other environment variables
      GOOGLE_CLOUD_PROJECT: ${GOOGLE_CLOUD_PROJECT:-}
      FIREBASE_CREDENTIALS_BASE64: ${FIREBASE_CREDENTIALS_BASE64:-}
      JWT_SECRET: ${JWT_SECRET:-}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    volumes:
      - ../../backend:/app
    ports:
      - "8000:8000"  # Main API port
    networks:
      - procure_network
    command: >
      sh -c "
        cd /app &&
        sleep 5 &&  # Add a small delay to ensure postgres is ready
        alembic upgrade head &&
        uvicorn procure.server.main:app --host 0.0.0.0 --port 8000 --reload"

volumes:
  postgres_data:

networks:
  procure_network:
